import time, logging, asyncio
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List, Dict
from fastapi.middleware.cors import CORSMiddleware
from providers import chat_with_fallback

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")

app = FastAPI()
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://127.0.0.1:3000","http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class ChatRequest(BaseModel):
    provider: str
    model: str
    message: str
    temperature: float = 0.2

@app.get("/health")
def health():
    return {"status": "ok"}

@app.get("/models")
def models() -> List[Dict[str, str]]:
    return [
        {"provider": "openai", "model": "gpt-4o-mini"},
        {"provider": "groq", "model": "llama3-8b-8192"},
        {"provider": "gemini", "model": "gemini-1.5-pro"},
        {"provider": "ollama", "model": "llama3:8b"},
    ]

@app.post("/chat")
def chat(req: ChatRequest):
    if not req.message.strip():
        raise HTTPException(status_code=400, detail="Empty message")
    t0 = time.time()
    try:
        reply = asyncio.run(chat_with_fallback(req.provider, req.model, req.message, req.temperature))
        dt = (time.time()-t0)*1000
        logging.info(f"chat ok provider={req.provider} model={req.model} ms={dt:.0f}")
        return {"reply": reply}
    except Exception as e:
        dt = (time.time()-t0)*1000
        logging.exception(f"chat fail provider={req.provider} model={req.model} ms={dt:.0f}: {e}")
        raise HTTPException(status_code=502, detail=f"Upstream error: {e}")

# --- RAG router ---
from rag import rag_router
app.include_router(rag_router, prefix="/rag")
